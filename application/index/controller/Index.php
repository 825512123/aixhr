<?php
namespace app\index\controller;

use app\admin\controller\Login;
use app\common\controller\Base;
use app\common\model\Member;

class Index extends Base
{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    public function index()
    {
        return $this->fetch();
    }

    public function register()
    {
        if(request()->isPost()) {
            $post = input("post.");
            $res = Member::getInstance()->editMember($post);
            if ($res > 0){
                $this->refreshSessionMember(['mobile' => $post['mobile']]);
                $user = json_encode(session('member_info'));
                return json(['code' => 1, 'member_info' => $user, 'member_id' => session('member_id'), 'msg' => '注册成功']);
            } else {
                return json(['code' => 0, 'data' => '', 'msg' => '注册失败,请稍后再试']);
            }
        } else {
            return $this->fetch();
        }
    }

    public function repassword()
    {
        if(request()->isPost()) {
            $post = input("post.");
            $res = Member::getInstance()->editMember($post);
            if ($res > 0){
                return json(['code' => 1, 'data' => '', 'msg' => '重置成功,请登录!']);
            } else {
                return json(['code' => 0, 'data' => '', 'msg' => '重置失败,请稍后再试!']);
            }
        } else {
            return $this->fetch();
        }
    }

    public function login()
    {
        $username = input("param.username");
        $password = input("param.password");
        /*$result = $this->validate(compact('username', 'password'), 'AdminValidate');
        if(true !== $result){
            return json(['code' => -5, 'data' => '', 'msg' => $result]);
        }*/
        $member = db('member')->where(['username|mobile' => $username])->find();
        if(empty($member)){// user表无此用户
	        // 判断是否为工作人员
	        $arr = explode('@',$username);
	        if(isset($arr[1])) {
	        	$login = new Login();
		        return $login->doLogin($username, $password);//工作人员登录
	        } else {
		        return json(['code' => -1, 'data' => '', 'msg' => '用户不存在！']);
	        }
        }

        if(md5(md5($password) . config('data_auth_key'))!= $member['password']){
            return json(['code' => -2, 'data' => '', 'msg' => '密码错误！']);
        }

        if(1 != $member['status']){
            return json(['code' => -6, 'data' => '', 'msg' => '该账号已被禁用！']);
        }

        $data['id'] = $member['id'];
        $data['update_time'] = time();
        $data['last_login_ip'] = ip2long($_SERVER["REMOTE_ADDR"]);
        Member::getInstance()->editMember($data);

        $this->refreshSessionMember(['id' => $member['id']]);
        $user = json_encode(session('member_info'));

        return json(['code' => 1, 'member_info' => $user, 'member_id' => session('member_id'), 'msg' => '登录成功']);
    }

    public function autoLogin()
    {
    	$post = input('post.');
        if($post['aid'] > 0) {
		    $login = new Login();// 管理员信息更新
		    $login->refreshSessionUser($post['member_id']);
		    $user = json_encode(session('user_info'));
	        return json(['code' => 1, 'member_info' => $user, 'member_id' => session('user_id'), 'aid' => session('aid'), 'msg' => '登录成功']);
	    } else {
		    $this->refreshSessionMember(['id' => $post['member_id']]);// 用户信息更新
		    $user = json_encode(session('member_info'));
	        return json(['code' => 1, 'member_info' => $user, 'member_id' => session('member_id'), 'msg' => '登录成功']);
	    }
    }

    public function loginOut()
    {
        session('member_id', null);
        session('member_info', null);
        session('user_id', null);
        session('aid', null);
        session('user_info', null);
        return json(['code' => 1, 'msg' => '退出成功']);
    }

    public function color()
    {
        return $this->fetch('color');
    }
}
